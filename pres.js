// pres.js 0.5
// author: Marko Ceferin <marko@cefer.in>
// license: GPLv3+

var defaultPres = 'pres'; // the default .pres to load, when no filename is specified

if (!String.prototype.endsWith) {
	String.prototype.endsWith = function(suffix) {
		return this.indexOf(suffix, this.length - suffix.length) !== -1;
	};
}
if (typeof String.prototype.trim !== 'function') {
	String.prototype.trim = function() {
		return this.replace(/^\s+|\s+$/g, ''); 
	}
}

var qualifyUrl = function(url) {
	var a = document.createElement('a');
	a.href = url;
	return a.href;
};

var addEventListener = function(e, t, h) {
	if (e.addEventListener) {
		e.addEventListener(t, h, false);
	} else if (e.attachEvent) {
		e.attachEvent('on' + t, h);
	} else {
		e['on' + t] = h;
	}
};

var cssStyleName = function(s) {
	if (s == 'float') return 'cssFloat';
	return s.replace(/-[a-z]/g, function(v) { return v.substring(1).toUpperCase(); });
};

var Pres = function(file) {
	var pres = this;
	this.globalstyle = {};
	this.contentstyle = {};
	this.header = document.getElementById('header');
	this.content = document.getElementById('content');
	this.footer = document.getElementById('footer');
	this.showHeader = document.getElementById('show-header');
	this.hideHeader = document.getElementById('hide-header');
	this.showFooter = document.getElementById('show-footer');
	this.hideFooter = document.getElementById('hide-footer');
	this.exportHtml = document.getElementById('export-html');
	this.downloadPres = document.getElementById('download-pres');
	this.title = this.header.getElementsByTagName('h1')[0];
	this.subtitle = this.header.getElementsByTagName('h2')[0];
	this.prev = document.getElementById('prev');
	this.next = document.getElementById('next');
	this.showHeader.style.display = this.showFooter.style.display = 'none';
	this.hideHeader.style.display = this.hideFooter.style.display = 'inline-block';
	addEventListener(this.showHeader, 'click', function() {
		pres.header.style.display = 'block';
		pres.hideHeader.style.display = 'inline-block';
		pres.showHeader.style.display = 'none';
	});
	addEventListener(this.hideHeader, 'click', function() {
		pres.header.style.display = 'none';
		pres.hideHeader.style.display = 'none';
		pres.showHeader.style.display = 'inline-block';
	});
	addEventListener(this.showFooter, 'click', function() {
		pres.footer.style.display = 'block';
		pres.hideFooter.style.display = 'inline-block';
		pres.showFooter.style.display = 'none';
	});
	addEventListener(this.hideFooter, 'click', function() {
		pres.footer.style.display = 'none';
		pres.hideFooter.style.display = 'none';
		pres.showFooter.style.display = 'inline-block';
	});
	addEventListener(document, 'keydown', function(e) {
		e = e || window.event;
		switch (e.keyCode) {
			case 39: // right
			case 34: // pgdn
			case 32: // space
				pres.nextSlide();
				break;
			case 37: // left
			case 33: // pgup
			case 8: // backspace
				pres.prevSlide()
				break;
		}
	});
};

Pres.prototype.serialize = function() {
	if (this.slides && this.slides.length > 0) {
		var l = [];
		var hr = '<hr />';
		for (var i=0; i<this.slides.length; i++) {
			var s = [];
			s.push('<div class="slide">');
			s.push('<h2 style="align:center">' + this.slides[i].title + '</h2>');
			s.push(this.slides[i].e.innerHTML);
			s.push('</div>');
			l.push(s.join(''));
		}
		var head = '<head><title>' + this.title.innerHTML + '</title></head>';
		var header = '<div id="header"><h1 style="text-align:center"><a href="' + qualifyUrl(this.filePres) + '">' + this.title.innerHTML + '</a></h1></div>';
		var content = '<div id="content">' + l.join(hr) + '</div>';
		var footer = '<div id="footer"><p style="text-align:center">generated by <a href="http://github.com/mcef/pres">pres</a></div>';
		var presentation = '<!doctype html><html>' + head + '<body>' + header + hr + content + hr + footer + '</body></html>';
		return presentation;
	}
	return null;
};

Pres.prototype.load = function(file, skipIfLoaded) {
	skipIfLoaded = skipIfLoaded || false;
	var pos = file.indexOf('#');
	var slide = 0;
	if (pos >= 0) {
		slide = parseInt(file.substring(pos+1), 10) - 1;
		file = file.substring(0, pos);
	}
	if (skipIfLoaded && file==this.file) {
		if (slide != this.slide) {
			this.slide = slide;
			this.display();
		}
		return;
	}
	this.file = file;
	this.slide = slide;

	if (file === '') {
		file = 'pres';
	}
	if (!file.endsWith('.pres')) {
		file = file + '.pres';
	}
	this.filePres = file;
	var xhr = new XMLHttpRequest();
	var pres = this;
	var e = false;
	addEventListener(xhr, 'readystatechange', function() {
		if (xhr.readyState === 4) {
			if (xhr.status === 200) {
				try {
					pres.parse(xhr.responseText);
				} catch (err) {
					console.log(err);
					alert('error parsing .pres: ' + err);
				}
			} else {
				if (!e) {
					e = true;
					alert('error loading .pres, code: ' + xhr.status);
				}
			}
		}
	});
	addEventListener(xhr, 'error', function(err) {
		if (!e) {
			e = true;
			alert('error loading .pres: ' + err);
		}
		console.log(err);
		throw err;
	});
	xhr.open('GET', file, true);
	console.log('requesting ' + file);
	xhr.send();
};

Pres.prototype.parse = function(text) {
	var lines = text.split(/\r?\n/);
	if (lines.length < 1) {
		throw 'invalid number of lines in .pres file: ' + lines.length;
	}

	while (this.content.firstChild) {
		this.content.removeChild(this.content.firstChild);
	}
	for (var s in this.globalstyle) {
		document.body.style[s] = '';
		delete document.body.style[s];
	}
	for (var s in this.contentstyle) {
		this.content.style[s] = '';
		delete this.content.style[s];
	}
	this.globalstyle = {};
	this.contentstyle = {};
	this.style = {};
	this.slides = [];
	this.title.style.display = '';
	this.title.innerHTML = '';
	this.stage = 'title';
	this.currentSlide = null;

	for (var i=0; i<lines.length; i++) {
		var line = lines[i].trim();

		if (line.length > 0 && line[0] == '#') { // statement
			line = line.substring(1).trim();
			var p = line.indexOf(':');
			var stmt, arg;
			if (p < 0) {
				stmt = line;
				arg = '';
			} else {
				stmt = line.substring(0, p).trim();
				arg = line.substring(p+1).trim();
			}
			var stmtf = this.statements[stmt];
			if (stmtf) {
				stmtf(this, arg);
			} else {
				throw 'invalid statement: ' + stmt;
			}
		} else if (line.length > 0 && line[0] == '*') { // new slide
			if (this.stage === 'title' && this.title.innerHTML.length === 0) {
				this.title.style.display = 'none';
			}
			line = line.substring(1).trim();
			if (this.currentSlide) {
				this.slides.push(this.currentSlide);
			}
			this.currentSlide = new Slide(line);
			this.currentSlide.setStyle(this.style);
			this.stage = 'slide';
		} else switch (this.stage) { // other
			case 'title':
				if (line.length > 0) {
					this.title.innerHTML = line;
					this.stage = null;
				}
				break;

			case 'slide':
				if (line.length > 0 && line[0] === '-') {
					this.currentSlide.endParagraph(this.style);
					this.stage = 'list';
				}
				if (line.length === 0) {
					this.currentSlide.endParagraph(this.style);
					break;
				}
				// fallthrough
			case 'list':
				if (this.stage === 'list') {
					if (line.length === 0) {
						this.currentSlide.endListItem(this.style);
						this.currentSlide.endList(this.style);
						this.stage = 'slide';
						break;
					} else if (line[0] === '-') {
						this.currentSlide.endListItem(this.style);
						line = line.substring(1).trim();
					}
				}

				if (line.length > 0) {
					var e = document.createElement('span');

					if (line[0] == '!') { // expression
						var pos = line.indexOf(' ');
						var expr;
						if (pos > 0) {
							expr = line.substring(1, pos).trim();
							line = line.substring(pos+1).trim();
						} else {
							expr = line.substring(1).trim();
							line = '';
						}
						e.innerHTML = line;

						for (var j=0; j<expr.length; j++) {
							var exprf = this.expressions[expr[j]];
							if (!exprf) {
								throw 'invalid expression: ' + expr[j];
							}
							e = exprf(e);
						}
					} else {
						e.innerHTML = line;
					}

					for (var k in this.style) {
						e.style[k] = this.style[k];
					}

					if (this.stage === 'list') {
						this.currentSlide.addToItem(e);
					} else {
						this.currentSlide.addToParagraph(e);
					}
				}
				break;

			case null:
				if (line.length > 0) {
					throw 'invalid content: ' + line;
				}
				break;

			default:
				throw 'invalid stage: ' + this.stage;
		}
	}

	this.slides.push(this.currentSlide);

	var ser = this.serialize();
	if (ser) {
		this.exportHtml.href = 'data:text/html;charset=utf-8,' + encodeURIComponent(this.serialize());
	} else {
		this.exportHtml.href = '#';
	}
	this.downloadPres.href = this.filePres;

	this.display();
};

Pres.prototype.display = function() {
	while (this.content.firstChild) {
		this.content.removeChild(this.content.firstChild);
	}
	document.title = this.slides[this.slide].title + ' (' + (this.slide+1) + '/' + this.slides.length + ') - ' + this.title.innerHTML;
	if (this.slides[this.slide].title) {
		this.subtitle.innerHTML = this.slides[this.slide].title;
		this.subtitle.style.display = 'block';
		delete this.subtitle.style.display;
	} else {
		this.subtitle.style.display = 'none';
	}
	this.content.appendChild(this.slides[this.slide].e);
	if (this.slide > 0) {
		this.prev.style.visibility = 'visible';
		this.prev.href = '#' + this.file + '#' + this.slide;
	} else {
		this.prev.style.visibility = 'hidden';
	}
	if (this.slide < this.slides.length-1) {
		this.next.style.visibility = 'visible';
		this.next.href = '#' + this.file + '#' + (this.slide+2);
	} else {
		this.next.style.visibility = 'hidden';
	}
	this.showHeader.href = this.hideHeader.href = this.showFooter.href = this.hideFooter.href = '#' + this.file + '#' + (this.slide+1);
};

Pres.prototype.prevSlide = function() {
	if (this.slide > 0) {
		this.slide--;
	}
	window.location.hash = '#' + this.file + '#' + (this.slide+1);
	this.display();
};

Pres.prototype.nextSlide = function() {
	if (this.slide < this.slides.length-1) {
		this.slide++;
	}
	window.location.hash = '#' + this.file + '#' + (this.slide+1);
	this.display();
};

Pres.prototype.statements = {
	style: function(pres, arg) {
		var p = arg.indexOf(':');
		if (p >= 0) {
			var k = arg.substring(0, p);
			var v = arg.substring(p + 1);
			pres.style[cssStyleName(k)] = v;
		} else {
			throw 'invalid css statement: ' + arg;
		}
	},

	nostyle: function(pres, arg) {
		if (arg.length > 0) {
			delete pres.style[cssStyleName(arg)];
		} else {
			pres.style = {};
		}
	},

	globalstyle: function(pres, arg) {
		var p = arg.indexOf(':');
		if (p >= 0) {
			var k = arg.substring(0, p);
			var v = arg.substring(p + 1);
			document.body.style[cssStyleName(k)] = v;
			pres.globalstyle[cssStyleName(k)] = v;
		} else {
			throw 'invalid css statement: ' + arg;
		}
	},

	contentstyle: function(pres, arg) {
		var p = arg.indexOf(':');
		if (p >= 0) {
			var k = arg.substring(0, p);
			var v = arg.substring(p + 1);
			pres.content.style[cssStyleName(k)] = v;
			pres.contentstyle[cssStyleName(k)] = v;
		} else {
			throw 'invalid css statement: ' + arg;
		}
	},

	notitle: function(pres, arg) {
		pres.title.style.display = 'none';
	},

	nosubtitle: function(pres, arg) {
		pres.subtitle.style.display = 'none';
	},

	noheader: function(pres, arg) {
		pres.header.style.display = 'none';
	},

	nofooter: function(pres, arg) {
		pres.footer.style.display = 'none';
	},

	'-': function(pres, arg) {
		var div = document.createElement('div');
		div.style.clear = 'both';
		pres.currentSlide.addToParagraph(div);
	},

	'': function(pres, arg) {},
};

Pres.prototype.expressions = {
	i: function(e) {
		e.style.fontStyle = 'italic';
		return e;
	},

	b: function(e) {
		e.style.fontWeight = 'bold';
		return e;
	},

	u: function(e) {
		if (e.style.textDecoration) {
			var u = document.createElement('span');
			u.style.textDecoration = 'underline';
			u.appendChild(e);
			return u;
		}
		e.style.textDecoration = 'underline';
		return e;
	},

	o: function(e) {
		if (e.style.textDecoration) {
			var u = document.createElement('span');
			u.style.textDecoration = 'overline';
			u.appendChild(e);
			return u;
		}
		e.style.textDecoration = 'overline';
		return e;
	},

	c: function(e) {
		var p = document.createElement('p');
		p.style.textAlign = 'center';
		p.appendChild(e);
		return p;
	},

	'@': function(e) {
		var a = document.createElement('a');
		var p = e.innerHTML.indexOf(' ');
		if (p >= 0) {
			a.href = e.innerHTML.substring(0, p);
			e.innerHTML = e.innerHTML.substring(p).trim();
		} else {
			a.href = e.innerHTML;
		}
		a.appendChild(e);
		return a;
	},

	I: function(e) {
		var i = document.createElement('img');
		var p = e.innerHTML.indexOf(' ');
		if (p >= 0) {
			i.src = e.innerHTML.substring(0, p);
			var s = e.innerHTML.substring(p).trim();
			i.alt = s;
			i.title = s;
			i.innerHTML = s;
		} else {
			i.src = e.innerHTML;
		}
		i.onclick = zoomImage;
		i.style.display = 'inline-block';
		return i;
	},

	'^': function(e) {
		var s = document.createElement('sup');
		s.appendChild(e);
		return s;
	},

	v: function(e) {
		var s = document.createElement('sub');
		s.appendChild(e);
		return s;
	},

	'!': function(e) {
		e.innerHTML = eval(e.innerHTML);
		return e;
	},

	'<': function(e) {
		e.style.cssFloat = 'left';
		return e;
	},

	'>': function(e) {
		e.style.cssFloat = 'right';
		return e;
	},
};


var Slide = function(title) {
	this.title = title;
	this.e = document.createElement('div');
	this.p = null;
	this.ul = null;
	this.style = null;
};

Slide.prototype.setStyle = function(k, v) {
	if (typeof v === 'undefined') {
		for (var i in k) {
			this.e.style[i] = k[i];
		}
	} else {
		this.e.style[k] = v;
	}
};

Slide.prototype.newElement = function(tag) {
	var e = document.createElement(tag);
	if (this.style) {
		for (var k in this.style) {
			e.style[k] = this.style[k];
		}
		this.style = null;
	}
	return e;
};

Slide.prototype.addToParagraph = function(e) {
	if (this.p) {
		this.p.appendChild(document.createTextNode(' '));
	} else {
		this.p = this.newElement('p');
	}
	this.p.appendChild(e);
};

Slide.prototype.endParagraph = function(style) {
	if (this.p) {
		this.style = style;
		this.e.appendChild(this.p);
	}
	this.p = null;
};

Slide.prototype.addToItem = function(e) {
	if (this.li) {
		this.li.appendChild(document.createTextNode(' '));
	} else {
		this.li = this.newElement('li');
	}
	this.li.appendChild(e);
};

Slide.prototype.endListItem = function(style) {
	if (this.li) {
		this.style = style;
		if (!this.ul) {
			this.ul = this.newElement('ul');
		}
		this.ul.appendChild(this.li);
	}
	this.li = null;
};

Slide.prototype.endList = function(style) {
	if (this.ul) {
		this.style = style;
		this.e.appendChild(this.ul);
	}
	this.ul = null;
};


var zoomImage = function(e) {
	var img = e.target;
	if (img.pres && img.pres.isZoomedIn) {
		img.style.display = img.pres.oldStyle.display;
		img.style.position = img.pres.oldStyle.position;
		img.style.top = img.pres.oldStyle.top;
		img.style.left = img.pres.oldStyle.left;
		img.style.width = img.pres.oldStyle.width;
		img.style.height = img.pres.oldStyle.height;
		img.pres.isZoomedIn = false;
	} else {
		if (!img.pres) {
			img.pres = {};
		}
		img.pres.oldStyle = {};
		img.pres.oldStyle.display = img.style.display;
		img.pres.oldStyle.position = img.style.position;
		img.pres.oldStyle.top = img.style.top;
		img.pres.oldStyle.left = img.style.left;
		img.pres.oldStyle.width = img.style.width;
		img.pres.oldStyle.height = img.style.height;
		img.pres.oldStyle.marginLeft = img.style.marginLeft;
		img.pres.oldStyle.marginRight = img.style.marginRight;

		img.style.display = 'block';
		img.style.position = 'absolute';
		var w = window.innerWidth;
		var h = window.innerHeight;
		var imgR = img.width / img.height;
		var winR = w / h;
		var scale = 1;
		if (w > h) {
			scale = h / img.height;
		} else {
			scale = w / img.width;
		}
		var iw = img.width;
		var ih = img.height;
		img.style.width = (iw * scale) + 'px';
		img.style.height = (ih * scale) + 'px';
		img.style.top = '0';
		img.style.left = ((w - img.width) / 2) + 'px';
		img.pres.isZoomedIn = true;
	}
};


var pres;

window.onload = function() {
	pres = new Pres();
	pres.load(window.location.hash ? window.location.hash.substring(1) : '');
};

window.onhashchange = function() {
	if (!pres) {
		pres = new Pres();
	}
	pres.load(window.location.hash.substring(1), true);
};
